.TH qthread_fork 3 "NOVEMBER 2006" libqthread "libqthread"
.SH NAME
\fBqthread_fork\fR, \fBqthread_fork_to\fR \- spawn a qthread
.SH SYNOPSIS
.B #include <qthread/qthread.h>

.I int
.br
\fBqthread_fork\fR(const qthread_f *\fIf\fR, const void *\fIarg\fR, aligned_t *\fIret\fR);
.PP
.I int
.br
\fBqthread_fork_to\fR(const qthread_f *\fIf\fR, const void *\fIarg\fR, aligned_t *\fIret\fR,
.ti +16n
const qthread_shepherd_id_t \fIshepherd\fR);
.SH DESCRIPTION
These are the functions for generating new qthreads.
.PP
The first argument to these functions, \fIf\fR, is a function that will be run
to completion by the created qthread. (Note that \fIf\fR is a qthread_f and not
a qthread_t.) The second argument to these functions, \fIarg\fR, is an argument
that will be passed to the specified function. Finally, \fIret\fR is a pointer
to the location that the return value of \fIf\fR will be placed into.
.PP
The qthread_f function must have a prototype like this:
.RS
.PP
aligned_t function(qthread_t *me, void *arg);
.RE
.PP
The \fBqthread_fork_to\fR() function spawns the qthread to a specific shepherd.
.PP
When a qthread is spawned, it is immediately scheduled to be run, and may be
executed by its shepherd at any time.
.PP
The return value of the function \fIf\fR will be placed into the memory pointed
to by \fIret\fR, in accordance with the full-empty bits. When
\fBqthread_fork\fR() or \fBqthread_fork_to\fR() is called, \fIret\fR will be
emptied (as if it had been passed to \fBqthread_empty\fR()). When the function
\fIf\fR returns, the returned value will be stored into \fIret\fR and \fIret\fR
will be filled. The way to block until a function has finished is to use
\fBqthread_readFF\fR() on the \fIret\fR pointer.
.SH RETURN VALUE
On success, the thread is spawned and 0 is returned. On error, a non-zero
error code is returned.
.SH ERRORS
.TP 12
ENOMEM
Not enough memory could be allocated.
.SH "SEE ALSO"
.BR qthread_prepare (3),
.BR qthread_prepare_for (3),
.BR qthread_schedule (3),
.BR qthread_shedule_on (3)
