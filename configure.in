#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT([qthread], [1.1], [kbwheel@sandia.gov])
AC_PREREQ(2.59)
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])

AM_INIT_AUTOMAKE([foreign check-news dist-bzip2 no-define])

AC_CONFIG_SRCDIR([src/qthread.c])
AC_CONFIG_HEADERS([include/config.h include/qthread/common.h])

AC_CANONICAL_HOST

case "$host" in
	*-solaris2.8)
	AC_DEFINE(EXTRA_MAKECONTEXT_ARGC, 1, [solaris 8 requires argc be one larger than the actual count of arguments])
	AC_DEFINE(INVERSE_STACK_POINTER, 1, [make the ss_sp member of uc_stack be the high-address of the stack, rather than the low-address of the stack (which is the usual behavior)])
	;;
	*-solaris*)
	AC_DEFINE(__MAKECONTEXT_V2_SOURCE, 1, [force the Sun makecontext to behave correctly])
	;;
esac

# not sure why this is necessary... Something in qalloc, apparently, but I'd
# like more detail.
AC_DEFINE(_GNU_SOURCE, 1, [make pthreads build correctly])

# Checks for programs.
AC_PROG_CC
QTHREAD_PROG_CC_C99 # a copy of autoconf 2.60's AC_PROG_CC_C99
AC_PROG_CPP
AC_PROG_CXX
AM_PROG_AS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

if test "$CC" == "cc" ; then
	case "$host" in
		*-solaris*)
		AC_DEFINE(SUN_CC_BUG_1, 1, [work around a bug that seems to exist in Sun's compiler])
		sun_bug_defined=1
		;;
	esac
fi

if test "$ac_cv_prog_cc_c99" != "no" ; then
    AC_DEFINE(C99_ACCEPTED, 1, [if $CC understands C99 syntax])
fi

AC_MSG_CHECKING([if $CC is gcc])
if echo "$CC" | grep '^gcc' >/dev/null ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

if echo "$CC" | grep '^gcc' >/dev/null ; then
# Find out if GCC understands -fno-gcse
AC_MSG_CHECKING([if $CC understands -fno-gcse])
CFLAGS_1="$CFLAGS"
CFLAGS="$CFLAGS -fno-gcse"
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],[ac_nogcse=yes],[ac_nogcse=no])
if test "$ac_nogcse" == "no" ; then
	CFLAGS="$CFLAGS_1"
fi
AC_MSG_RESULT($ac_nogcse)
fi

QTHREAD_EXTRA_OBJS=""

# Checks for libraries.
AC_CHECK_LIB([pthread], [pthread_create], , AC_MSG_ERROR([Need pthreads]))

AC_ARG_WITH([cprops],
            [AC_HELP_STRING([--with-cprops],
                            [Location of libcprops library])])
if test ! -z "$with_cprops" -a "$with_cprops" != "yes" ; then
  CPPFLAGS="${CPPFLAGS} -I$with_cprops/include"
  LDFLAGS="${LDFLAGS} -L$with_cprops/lib"
fi
AC_SEARCH_LIBS([cp_hashtable_create], [cprops "cprops -ldl" "cprops -lsocket -lnsl" "cprops -lsocket -lnsl -ldl"], ,
	       AC_MSG_ERROR([Need libcprops 0.1.6 or better. See http://cprops.sf.net/]))
AC_SEARCH_LIBS([ceil],[m], ,AC_MSG_ERROR(["Can't seem to find ceil()"]))

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h fcntl.h ucontext.h])
AX_CREATE_STDINT_H(include/qthread/qthread-int.h)
AC_SYS_LARGEFILE
AC_CHECK_FUNCS([fstat64 lseek64], ac_cv_64stat=yes, ac_cv_64stat=no)
if test "$ac_cv_64stat" == "yes" ; then
	AC_DEFINE(QTHREAD_64STATS, 1, [define if using fstat64 and friends])
fi

ac_cv_setrlimit=no
case "$host" in
	ia64-*-linux-*)
	# this does not need get/setrlimit
	;;
    *-linux-*)
    AC_CHECK_HEADERS([sys/time.h sys/resource.h], , AC_MSG_ERROR(["The headers sys/time.h and sys/resource.h are required for efficient threads on Linux."]))
    AC_CHECK_FUNCS([getrlimit setrlimit], , AC_MSG_ERROR(["The functions getrlimit and setrlimit required for efficient threads on Linux."]))
	ac_cv_setrlimit=yes
    ;;
esac

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_VOLATILE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
headers='
#include <pthread.h>
'
AC_COMPILE_CHECK_SIZEOF(pthread_mutex_t, $headers, 24 40 44 64)
AC_DEFINE(PTHREAD_MUTEX_SMALL_ENOUGH, 1, [this signifies that pthread_mutex_t is small enough to fit in the existing data structures])

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_VPRINTF
AC_FUNC_MMAP
AC_CHECK_FUNCS([strtol floor memset munmap memcpy])
AC_CHECK_FUNCS([getcontext swapcontext makecontext], ac_cv_context_funcs=yes, ac_cv_context_funcs=no)

if test "x$ac_cv_sizeof_int" == x ; then
	AC_CHECK_SIZEOF(int, [4 8 16 2])
fi
if test "x$ac_cv_sizeof_voidp" == x ; then
	AC_CHECK_SIZEOF(void*, [4 8 16 2])
fi

if test "$ac_cv_context_funcs" = "yes" ; then
	AC_DEFINE(HAVE_CONTEXT_FUNCS, 1, [the system has its own getcontext functions])
	if test "$ac_cv_sizeof_int" -ne "$ac_cv_sizeof_voidp" ; then
		AC_MSG_CHECKING(whether makecontext needs split arguments)
		AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <assert.h>
#include <stdlib.h>
#include <ucontext.h>

void func(void * msg)
{
	long expected = 0;
	expected = (1L << 16);
	expected = expected << 16;
	expected += 1L;

	((long)msg == expected) ? exit(0) : exit(1);
}

int main()
{
	if (sizeof(int) == sizeof(void*)) {
		return 0;
	} else {
		ucontext_t c, d;
		/* big enough to ignore stack direction */
		char * stack = malloc(1024*1024*16);
		long msg = 0;

		if (sizeof(long) != sizeof(void*)) return 3;
		getcontext(&c);
		getcontext(&d);
		c.uc_stack.ss_sp = stack + 1024*1024*8;
		c.uc_stack.ss_size = 1024*1024*8 - 64;
		c.uc_link = &d;
		/* keep compiler quiet */
		msg = (1L << 16);
		msg = msg << 16;
		msg += 1L;

		makecontext(&c, (void (*)(void))func, 1, msg);
		swapcontext(&d, &c);

		return 2;
	}
}]])],[ac_cv_contextret="safe"],[ac_cv_contextret="split"],[ac_cv_contextret="split"])
		if test "$ac_cv_contextret" == "split" ; then
			AC_MSG_RESULT(yes)
			AC_DEFINE(QTHREAD_MAKECONTEXT_SPLIT, 1, [makecontext() sometimes can only pass int-sized variables, which is a problem on systems where sizeof(void*) > sizeof(int)])
		else
			AC_MSG_RESULT(no)
		fi
	fi
else
	QTHREAD_EXTRA_OBJS="$QTHREAD_EXTRA_OBJS osx_compat/libosx_compat.la"
	AC_CHECK_FUNCS([memmove], , AC_MSG_ERROR(["A functional memmove is required if you do not have the get/swap/make-context functions."]))
	AC_HEADER_SYS_WAIT
	AC_TYPE_PID_T
fi

AC_ARG_ENABLE(xeon,AS_HELP_STRING([--enable-xeon],[enable Xeon-specific optimizations (since Xeons do not have the 486 #defines)]),
		ac_cv_xeon=$enableval, ac_cv_xeon=no)
if test "$ac_cv_xeon" = "yes" ; then
    AC_DEFINE(QTHREAD_XEON, 1, [this is a Xeon CPU])
fi

AC_ARG_ENABLE(setrlimit,AS_HELP_STRING([--disable-setrlimit],[don't use setrlimit to limit the stack (which is normally used only on Linux systems)]),
		ac_cv_setrlimit=$enableval)
if test "$ac_cv_setrlimit" = "yes" ; then
	AC_DEFINE(NEED_RLIMIT, 1, [whether the library should use get/set-rlimit functions])
fi

AC_ARG_ENABLE(software-increments,AS_HELP_STRING([--enable-software-increments],[use mutexes to do the internal increments; possibly faster in some cases, and compatible with more compilers (I'm looking at you, Intel).]),
		ac_cv_software_increments=$enableval, ac_cv_software_increments=no)
if test "$ac_cv_software_increments" = "yes" ; then
	AC_DEFINE(QTHREAD_MUTEX_INCREMENT, 1, [use mutexes when incrementing, rather than architecture-specific assembly])
fi

AC_ARG_ENABLE(aligncheck,AS_HELP_STRING([--disable-aligncheck],check the alignment of synchronization addresses),
	    ac_cv_aligncheck=$enableval, ac_cv_aligncheck=yes)
if test "$ac_cv_aligncheck" = "no" ; then
    AC_DEFINE(QTHREAD_NOALIGNCHECK, 1, [dont check the alignment of synchronization addressses])
fi
AC_ARG_ENABLE(fullsize-stacks,AS_HELP_STRING([--enable-fullsize-stacks],use 8MB stacks for every thread),
	    ac_cv_fullsizestack=$enableval, ac_cv_fullsizestack=no)
if test "$ac_cv_fullsizestack" = "yes" ; then
    AC_DEFINE(QTHREAD_FULL_SIZE_STACKS, 1, [use 8MB stacks for every thread])
else
    AC_ARG_ENABLE(very-small-stacks,AS_HELP_STRING([--enable-very-small-stacks],[use 2k stacks for every thread (dangerous)]),
		ac_cv_verysmallstacks=$enableval, ac_cv_verysmallstacks=no)
    if test "$ac_cv_verysmallstacks" = "yes" ; then
	AC_DEFINE(QTHREAD_REALLY_SMALL_STACKS, 1, [use 2k stacks for every thread])
    fi
fi
AC_ARG_ENABLE(debug-trace,AS_HELP_STRING([--enable-debug-trace],[prints out debugging information as programs run, tracing their qthread-related behavior]),
	    ac_cv_debugtrace=$enableval, ac_cv_debugtrace=no)
if test "$ac_cv_debugtrace" = "yes" ; then
    AC_DEFINE(QTHREAD_DEBUG, 1, [prints out debugging information at runtime])
fi
AC_ARG_ENABLE(unpooled-memory,AS_HELP_STRING([--enable-unpooled-memory],[prevents qthreads from (in most cases) using memory pools, which is sometimes more compatible with machines that have unusual alignment issues]),
	    ac_cv_unpooled=$enableval, ac_cv_unpooled=no)
if test "$ac_cv_unpooled" = "yes" ; then
    AC_DEFINE(UNPOOLED, 1, [prevents the use of memory pools (mostly)])
fi
AC_ARG_ENABLE(thread-count,AS_HELP_STRING([--enable-thread-count],[counts the number of threads and the number of concurrent threads and prints it out when qthread_finalize() is run; slows down computation]),
	    ac_cv_threadcount=$enableval, ac_cv_threadcount=no)
if test "$ac_cv_threadcount" = "yes"; then
    AC_DEFINE(QTHREAD_COUNT_THREADS, 1, [keeps track of the number of threads])
fi
AC_ARG_ENABLE(shepherd-profiling,AS_HELP_STRING([--enable-shepherd-profiling],[counts the amount of time that each shepherd spends idle; based on gettimeofday, so it's vulnerable to interference]),
		ac_cv_shep_profile=$enableval, ac_cv_shep_profile=no)
if test "$ac_cv_shep_profile" = "yes" ; then
	ac_cv_need_qtimer="yes";
	AC_DEFINE(QTHREAD_SHEPHERD_PROFILING, 1, [adds code to monitor how much time shepherds spend idle])
fi
AC_ARG_ENABLE(asserts,AS_HELP_STRING([--enable-asserts],[adds sanity checks to most qthread functions]),
	    ac_cv_asserts=$enableval, ac_cv_asserts=no)
if test "$ac_cv_asserts" = "no" ; then
    AC_DEFINE(QTHREAD_NO_ASSERTS, 1, [removes sanity checks from most qthread functions])
fi
AC_ARG_ENABLE(lazy-threadids,AS_HELP_STRING([--disable-lazy-threadids],[makes qthread assign thread IDs at spawning time, rather than as necessary; this ensures every thread gets a unique thread id]),
	    ac_cv_lazythreadids=$enableval, ac_cv_lazythreadids=yes)
if test "$ac_cv_lazythreadids" = "no" ; then
    AC_DEFINE(QTHREAD_NONLAZY_THREADIDS, 1, [makes sure every thread gets an id at creation time])
fi
AC_ARG_ENABLE(64bit-alignment,AS_HELP_STRING([--enable-64bit-alignment],[forces the aligned_t type to be 64-bits]),
		ac_cv_64bit_align=$enableval, ac_cv_64bit_align=no)
if test "$ac_cv_64bit_align" = "yes" ; then
	AC_DEFINE(QTHREAD_64_BIT_ALIGN, 1, [forces aligned_t to be 64 bits])
fi

if test "$ac_cv_need_qtimer" = "yes" ; then
	QTHREAD_EXTRA_OBJS="$QTHREAD_EXTRA_OBJS qtimer/libqtimer.la"
	case "$host" in
		*-darwin*)
		AC_CHECK_HEADERS([mach/mach_time.h])
		ac_cv_qtimertype=mach
		;;
		*)
		AC_CHECK_HEADERS([sys/time.h])
		AC_HEADER_TIME
		ac_cv_qtimertype=gettimeofday
		;;
	esac
fi

AM_CONDITIONAL(USING_MACH, [test "$ac_cv_qtimertype" = "mach"])
AM_CONDITIONAL(USING_GETTIMEOFDAY, [test "$ac_cv_qtimertype" = "gettimeofday"])
AC_SUBST(QTHREAD_EXTRA_OBJS)

ac_cv_qthreads_implementation=unix

################################################################################
# THIS IS THE SST STUFF                                                        #
################################################################################
AC_ARG_WITH(sst,AS_HELP_STRING([--with-sst=<path_to_SST>],[compiles the SST version of qthreads, relying on the SST includes being in the specified directory. If 'yes', then the includes are assumed to be specified in the CPPFLAGS.]),
	ac_cv_sst=$withval, ac_cv_sst="")
AC_ARG_WITH(statlibs,AS_HELP_STRING([--with-statlibs=<path_to_static_libs>],[option for compiling with static libraries, only needed for compiling the test programs for use with SST]),
	ac_cv_statlibs=$withval, ac_cv_statlibs="")
if test "$ac_cv_sst" ; then
	SST_INCLUDE=""
	SST_LIBS=""
	CPPFLAG_SAVE="$CPPFLAGS"
	test "$ac_cv_sst" == "yes" || SST_INCLUDE="-I$ac_cv_sst/Struct_Simulator/serialProto/ -I$ac_cv_sst/Struct_Simulator/serialProto/ssFrontEnd/ -I$ac_cv_sst/Struct_Simulator/pimSrc/ppc/"
	CPPFLAGS="$CPPFLAGS $SST_INCLUDE"
	AC_CHECK_HEADERS([ppcPimCalls.h pimSysCallDefs.h pimSysCallTypes.h], , AC_MSG_ERROR(["Is your SST setup complete and specified with --with-sst=<path_to_SST>?"]))
	CPPFLAGS="$CPPFLAGS"
	test "$ac_cv_statlibs" && SST_LIBS="-L$ac_cv_statlibs"
	ac_cv_qthreads_implementation=sst
	AC_DEFINE(SST, 1, [compile for the SST])
fi

AM_CONDITIONAL([COMPILE_FOR_SST], [test "$ac_cv_qthreads_implementation" == "sst"])
AM_CONDITIONAL([NEED_OSX_COMPAT], [test "$ac_cv_context_funcs" = no && test "$ac_cv_qthreads_implementation" == "unix"])
AM_CONDITIONAL([NEED_QTIMER], [test "$ac_cv_need_qtimer" = "yes"])
AC_SUBST(SST_INCLUDE)
AC_SUBST(SST_LIBS)

AC_CONFIG_FILES([
    Makefile
    src/Makefile
    src/osx_compat/Makefile
    src/qtimer/Makefile
    man/Makefile
    man/man3/Makefile
    include/Makefile
    include/qthread/Makefile
    test/Makefile])
AC_OUTPUT

echo ""
echo    "           Target Style: $ac_cv_qthreads_implementation"
echo    "        Lazy Thread IDs: $ac_cv_lazythreadids"
echo    "  Sanity assert() Calls: $ac_cv_asserts"
echo    "        Thread Counting: $ac_cv_threadcount"
echo    "        Use setrlimit(): $ac_cv_setrlimit"
echo    " Mutex-based Increments: $ac_cv_software_increments"
echo    "Check address alignment: $ac_cv_aligncheck"
echo    "     Shepherd profiling: $ac_cv_shep_profile"
echo -n "             Stack size: "
if test "$ac_cv_fullsizestack" = "yes" ; then
	echo "8MB"
elif test "$ac_cv_verysmallstacks" = "yes" ; then
	echo "2kB"
else
	echo "4kB"
fi
echo    " Debugging Trace Output: $ac_cv_debugtrace"
echo    "        Unpooled Memory: $ac_cv_unpooled"
echo ""
