On a machine with approximately 2GB of RAM, this library was able to spawn and
handle 350,000 qthreads. With some modifications (mostly in stack-size), it was
able to handle 1,000,000 qthreads. It may be able to do more, but swapping will
become an issue, and you may start to run out of address space.

This library has been tested, and runs well, on a 64-bit machine, with some
alignment concerns.

On many machines, the stack is required to be page-aligned and there are
usually strict requirements for the alignment of the ucontext_t structure
(particularly on a 64-bit machine). Thus, the stack and context generally take
at least 2 pages (8k). The stack can be limited even further (it has been
tested with a 2k stack on a 32-bit machine, which is how it handled 1,000,000
threads).

Currently, the only real limiting factor on the number of threads is the amount
of memory and address space you have available. For more than 2^32 threads, the
thread_id value will need to be made larger (or eliminated, as it is not
required by the library itself).

For information on how to use qthread or qalloc, there is A LOT of information
in the header files (qthread.h and qalloc.h).

*******************************************************
NOTE FOR PGI USERS
pgcc needs the -c9x flag in order to correctly process variadic macros (which
are used in qthread.c) and the PRIuMAX format definitions (used in qalloc.c).
Use the CFLAGS variable to add this flag. Note that pgcc's support for the full
C90/C99 standards is lousy, so most C90/C99 features that COULD be used are
avoided.

*******************************************************
NOTE FOR IBM XL USERS
make check will probably fail with the error:

xlc++: 1501-210 command option t contains an incorrect subargument
/home/kbwheel/qthread/.libs/libqthread.so: could not read symbols: Invalid operation

This does not mean that the library did not compile correctly, but instead
means that your libtool is probably broken (most are). The problem seems to be
that the wrapper script (testloop) is created with incorrect arguments to
xlc++. The other wrapper scripts (e.g. test1/test2/test3/testq) all have the
correct arguments, and if you modify testloop so that $relink_command uses the
"-Wl,--rpath -Wl,directory" syntax rather than the "-rpath,directory" syntax,
it would work just fine.
