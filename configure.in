#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(qthread, 0.8, rcmurph@sandia.gov)
AM_INIT_AUTOMAKE(qthread, 0.8)
AC_CONFIG_SRCDIR([main.c])
AM_CONFIG_HEADER([config.h])

AC_CANONICAL_HOST

case "$host" in
	*-solaris*)
	AC_DEFINE(__MAKECONTEXT_V2_SOURCE, 1, [force the Sun makecontext to behave correctly])
	;;
esac

AC_DEFINE(_GNU_SOURCE, 1, [make pthreads build correctly])
AC_DEFINE(_FILE_OFFSET_BITS, 64, [allow big files])

# Checks for programs.
AC_PROG_CC
QTHREAD_PROG_CC_C99 # a copy of autoconf 2.60's AC_PROG_CC_C99
AC_PROG_CPP
AC_PROG_CXX
AM_PROG_AS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_PROG_RANLIB

if test "$ac_cv_prog_cc_c99" != "no" ; then
    AC_DEFINE(C99_ACCEPTED, 1, [if $CC understands C99 syntax])
fi

if test "$CC" != "xlc" ; then
# Find out if GCC understands -fno-gcse
AC_MSG_CHECKING([if $CC understands -fno-gcse])
CFLAGS_1="$CFLAGS"
CFLAGS="$CFLAGS -fno-gcse"
AC_TRY_COMPILE(,,ac_nogcse=yes,ac_nogcse=no)
if test "$ac_nogcse" == "no" ; then
	CFLAGS="$CFLAGS_1"
fi
AC_MSG_RESULT($ac_nogcse)
fi

QTHREAD_EXTRA_OBJS=""

# Checks for libraries.
AC_CHECK_LIB([pthread], [pthread_create], , AC_MSG_ERROR([Need pthreads]))
AC_SEARCH_LIBS([cp_hashtable_create], [cprops "cprops -ldl"], ,
	       AC_MSG_ERROR([Need libcprops 0.1.6 or better. See http://cprops.sf.net/]))
AC_SEARCH_LIBS([ceil],[m], ,AC_MSG_ERROR(["Can't seem to find ceil()"]))

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h fcntl.h ucontext.h])
AX_CREATE_STDINT_H(qthread/qthread-int.h)

ac_cv_setrlimit=no
case "$host" in
	ia64-*-linux-*)
	# this does not need get/setrlimit
	;;
    *-linux-*)
    AC_CHECK_HEADERS([sys/time.h sys/resource.h], , AC_MSG_ERROR(["The headers sys/time.h and sys/resource.h are required for efficient threads on Linux."]))
    AC_CHECK_FUNCS([getrlimit setrlimit], , AC_MSG_ERROR(["The functions getrlimit and setrlimit required for efficient threads on Linux."]))
	ac_cv_setrlimit=yes
    ;;
esac

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_VOLATILE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
headers='
#include <pthread.h>
'
AC_COMPILE_CHECK_SIZEOF(pthread_mutex_t, $headers, 24 40 44 64)
AC_DEFINE(PTHREAD_MUTEX_SMALL_ENOUGH, 1, [this signifies that pthread_mutex_t is small enough to fit in the existing data structures])

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_VPRINTF
AC_FUNC_MMAP
AC_CHECK_FUNCS([strtol floor memset munmap memcpy])
AC_CHECK_FUNCS([getcontext swapcontext makecontext], ac_cv_context_funcs=yes, ac_cv_context_funcs=no)

if test "$ac_cv_context_funcs" = "yes" ; then
	AC_DEFINE(HAVE_CONTEXT_FUNCS, 1, [the system hsas its own getcontext functions])
else
	QTHREAD_EXTRA_OBJS="$QTHREAD_EXTRA_OBJS context.lo asm.lo"
	AC_CHECK_FUNCS([memmove], , AC_MSG_ERROR(["A functional memmove is required if you do not have the get/swap/make-context functions."]))
	AC_HEADER_SYS_WAIT
	AC_TYPE_PID_T
fi

AC_SUBST(QTHREAD_EXTRA_OBJS)

AC_ARG_ENABLE(xeon,AC_HELP_STRING(--enable-xeon,[enable Xeon-specific optimizations (since Xeons do not have the 486 #defines)]),
		ac_cv_xeon=$withval, ac_cv_xeon=no)
if test "$ac_cv_xeon" = "yes" ; then
    AC_DEFINE(QTHREAD_XEON, 1, [this is a Xeon CPU])
fi

AC_ARG_ENABLE(setrlimit,AC_HELP_STRING(--disable-setrlimit,[don't use setrlimit to limit the stack (which is normally used only on Linux systems)]),
		ac_cv_setrlimit=$withval)
if test "$ac_cv_setrlimit" = "yes" ; then
	AC_DEFINE(NEED_RLIMIT, 1, [whether the library should use get/set-rlimit functions])
fi

AC_ARG_ENABLE(software-increments,AC_HELP_STRING(--enable-software-increments,[use mutexes to do the internal increments; possibly faster in some cases, and compatible with more compilers (I'm looking at you, Intel). Use -DQTHREAD_MUTEX_INCREMENT to when compiling your own code to force qthread_incr() do something similar.]),
		ac_cv_software_increments=$withval, ac_cv_software_increments=no)
if test "$ac_cv_software_increments" = "yes" ; then
	AC_DEFINE(QTHREAD_MUTEX_INCREMENT, 1, [use mutexes when incrementing, rather than architecture-specific assembly])
fi

AC_ARG_ENABLE(aligncheck,AC_HELP_STRING(--disable-aligncheck,check the alignment of synchronization addresses),
	    ac_cv_aligncheck=$withval, ac_cv_aligncheck=yes)
if test "$ac_cv_aligncheck" = "no" ; then
    AC_DEFINE(QTHREAD_NOALIGNCHECK, 1, [dont check the alignment of synchronization addressses])
fi
AC_ARG_ENABLE(fullsize-stacks,AC_HELP_STRING(--enable-fullsize-stacks,use 8MB stacks for every thread),
	    ac_cv_fullsizestack=$withval, ac_cv_fullsizestack=no)
if test "$ac_cv_fullsizestack" = "yes" ; then
    AC_DEFINE(QTHREAD_FULL_SIZE_STACKS, 1, [use 8MB stacks for every thread])
else
    AC_ARG_ENABLE(very-small-stacks,AC_HELP_STRING(--enable-very-small-stacks,[use 2k stacks for every thread (dangerous)]),
		ac_cv_verysmallstacks=$withval, ac_cv_verysmallstacks=no)
    if test "$ac_cv_verysmallstacks" = "yes" ; then
	AC_DEFINE(QTHREAD_REALLY_SMALL_STACKS, 1, [use 2k stacks for every thread])
    fi
fi
AC_ARG_ENABLE(debug-trace,AC_HELP_STRING(--enable-debug-trace,[prints out debugging information as programs run, tracing their qthread-related behavior]),
	    ac_cv_debugtrace=$withval, ac_cv_debugtrace=no)
if test "$ac_cv_debugtrace" = "yes" ; then
    AC_DEFINE(QTHREAD_DEBUG, 1, [prints out debugging information at runtime])
fi
AC_ARG_ENABLE(unpooled-memory,AC_HELP_STRING(--enable-unpooled-memory,[prevents qthreads from (in most cases) using memory pools, which is sometimes more compatible with machines that have unusual alignment issues]),
	    ac_cv_unpooled=$withval, ac_cv_unpooled=no)
if test "$ac_cv_unpooled" = "yes" ; then
    AC_DEFINE(UNPOOLED, 1, [prevents the use of memory pools (mostly)])
fi
AC_ARG_ENABLE(thread-count,AC_HELP_STRING(--enable-thread-count,[counts the number of threads and the number of concurrent threads and prints it out when qthread_finalize() is run; slows down computation]),
	    ac_cv_threadcount=$withval, ac_cv_threadcount=no)
if test "$ac_cv_threadcount" = "yes"; then
    AC_DEFINE(QTHREAD_COUNT_THREADS, 1, [keeps track of the number of threads])
fi
AC_ARG_ENABLE(asserts,AC_HELP_STRING(--enable-asserts,[adds sanity checks to most qthread functions]),
	    ac_cv_asserts=$withval, ac_cv_asserts=no)
if test "$ac_cv_asserts" = "no" ; then
    AC_DEFINE(QTHREAD_NO_ASSERTS, 1, [removes sanity checks from most qthread functions])
fi
AC_ARG_ENABLE(lazy-threadids,AC_HELP_STRING(--disable-lazy-threadids,[makes qthread assign thread IDs at spawning time, rather than as necessary; this ensures every thread gets a unique thread id]),
	    ac_cv_lazythreadids=$withval, ac_cv_lazythreadids=yes)
if test "$ac_cv_lazythreadids" = "no" ; then
    AC_DEFINE(QTHREAD_NONLAZY_THREADIDS, 1, [makes sure every thread gets an id at creation time])
fi

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
