# -*- Autoconf -*-
#
# Copyright (c)      2008  Sandia Corporation
#

## --------------------- ##
## Autoconf Requirements ##
## --------------------- ##
AC_PREREQ(2.59)

## ---------------------------------- ##
## Autoconf / Automake Initialization ##
## ---------------------------------- ##
AC_INIT([qthread], [1.1], [kbwheel@sandia.gov])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])
AC_CONFIG_SRCDIR([src/qthread.c])

dnl Require at least AM 1.7.  Prior versions require AM_CONFIG_HEADER
dnl and have no equivalent to AC_CONFIG_HEADERS (the plural version),
dnl which is a pain.  AM 1.7 also added support for putting target
dnl information in AM_CONDITIONAL blocks and using the += modifier.
AM_INIT_AUTOMAKE([foreign check-news dist-bzip2 no-define 1.7])

# clean some extra things...
CLEANFILES="*~ .\#* .gdb_history"
AC_SUBST(CLEANFILES)

## -------------------------- ##
## Information on the package ##
## -------------------------- ##
AC_CANONICAL_HOST

AC_ARG_ENABLE([xeon],
  [AS_HELP_STRING([--enable-xeon],
     [enable Xeon-specific optimizations (since Xeons do not have the 486 #defines)])],
  [AC_DEFINE([QTHREAD_XEON], [1], [Build assuming a Xeon CPU])])

dnl Logic for this argument happens in system services section
AC_ARG_ENABLE([setrlimit],
  [AS_HELP_STRING([--disable-setrlimit],
     [don't use setrlimit to limit the stack (which is normally used only on Linux systems)])])
AS_IF([test -z "$enable_setrlimit"], [
  case "$host" in
    ia64-*-linux-*)
      # this does not need get/setrlimit
      enable_setrlimit="no"
    ;;
    *-linux-*)
      enable_setrlimit="yes"
    ;;
    *)
      enable_setrlimit="no"
  esac])

dnl Logic for dealing with this argument in compiler characteristics section, as it
dnl somewhat depends on assembly behavior
AC_ARG_ENABLE([software-increments],
  [AS_HELP_STRING([--enable-software-increments],
     [use mutexes to do the internal increments; possibly faster in some cases, and compatible with more compilers.])])

AC_ARG_ENABLE([aligncheck],
  [AS_HELP_STRING([--disable-aligncheck], [check the alignment of synchronization addresses])],
  [], [enable_aligncheck="yes"])
AS_IF([test "$enable_aligncheck" = "no"],
      [AC_DEFINE([QTHREAD_NOALIGNCHECK], [1],
         [Do not check the alignment of synchronization addresses])])

AC_ARG_ENABLE([debug-trace],
  [AS_HELP_STRING([--enable-debug-trace],
     [prints out debugging information as programs run, tracing their qthread-related behavior])],
  [], [enable_debug_trace="no"])
AS_IF([test "$enable_debug_trace" = "yes"],
      [AC_DEFINE([QTHREAD_DEBUG], [1], [prints out debugging information at runtime])])

AC_ARG_ENABLE([fullsize-stacks],
  [AS_HELP_STRING([--enable-fullsize-stacks], [use 8MB stacks for every thread])],
  [], [enable_fullsize_stacks="no"])
AC_ARG_ENABLE([very-small-stacks],
  [AS_HELP_STRING([--enable-very-small-stacks], [use 2k stacks for every thread (dangerous)])],
  [], [enable_very_small_stacks="no"])
AS_IF([test "$enable_debug_trace" = "yes" -a "$enable_very_small_stacks"],
	  [AC_MSG_ERROR([Debug tracing cannot be done with very small stacks])])
dnl keep in mind, if the stack size is not a multiple of the page size,
dnl alignment issues may become dicey, depending on the architecture
AS_IF([test "$enable_fullsize_stacks" = "yes"],   [qthread_cv_stack_size=8388608],
	  dnl debug tracing requires a big stack for doing vprintf
	  [AS_IF([test "$enable_debug_trace" = "yes"],       [qthread_cv_stack_size=8388608],
	  [AS_IF([test "$enable_very_small_stacks" = "yes"], [qthread_cv_stack_size=2048],
	  [qthread_cv_stack_size=4096])])])
AC_DEFINE_UNQUOTED([QTHREAD_DEFAULT_STACK_SIZE],[$qthread_cv_stack_size],
				   [What size stacks to use])

AC_ARG_ENABLE([unpooled-memory],
  [AS_HELP_STRING([--enable-unpooled-memory],
      [prevents qthreads from (in most cases) using memory pools, which is sometimes more compatible with machines that have unusual alignment issues])],
  [], [enable_unpooled_memory="no"])
AS_IF([test "$enable_unpooled_memory" = "yes"],
      [AC_DEFINE([UNPOOLED], [1], [prevents most uses of memory pools])])

AC_ARG_ENABLE([thread-count],
  [AS_HELP_STRING([--enable-thread-count],
     [counts the number of threads and the number of concurrent threads and prints it out when qthread_finalize() is run; slows down computation])],
  [], [enable_thread_count="no"])
AS_IF([test "$enable_thread_count" = "yes"],
      [AC_DEFINE([QTHREAD_COUNT_THREADS], [1], [keeps track of the number of threads])])

AC_ARG_ENABLE([shepherd-profiling],
  [AS_HELP_STRING([--enable-shepherd-profiling],
     [counts the amount of time that each shepherd spends idle; based on gettimeofday, so it's vulnerable to interference])],
  [], [enable_shepherd_profiling="no"])
AS_IF([test "$enable_shepherd_profiling" = "yes"],
      [AC_DEFINE([QTHREAD_SHEPHERD_PROFILING], [1], [adds code to monitor how much time shepherds spend idle])])

AC_ARG_ENABLE([asserts],
  [AS_HELP_STRING([--enable-asserts], [adds sanity checks to most qthread functions])],
  [], [enable_asserts="no"])
AS_IF([test "$enable_asserts" = "no"],
      [AC_DEFINE([QTHREAD_NO_ASSERTS], [1], [removes sanity checks from most qthread functions])])

AC_ARG_ENABLE([lazy-threadids],
  [AS_HELP_STRING([--disable-lazy-threadids],
     [makes qthread assign thread IDs at spawning time, rather than as necessary; this ensures every thread gets a unique thread id])],
  [], [enable_lazy_threadids="yes"])
AS_IF([test "$enable_lazy_threadids" = "no"],
      [AC_DEFINE([QTHREAD_NONLAZY_THREADIDS], [1], [makes sure every thread gets an id at creation time])])

AC_ARG_ENABLE([64bit-aligned_t],
  [AS_HELP_STRING([--enable-64bit-aligned_t], [Make aligned_t 64 bits (normally it is sizeof(int))])])
dnl deal with result once we figure out sizeof(int)

AC_ARG_ENABLE([64bit-alignment],
  [AS_HELP_STRING([--enable-64bit-alignment], [Align aligned_t to 8 byte boundry, even if it is 4 bytes long])])
AS_IF([test "$enable_64bit_alignment" = "yes" -o "$enable_64bit_aligned_t" = "yes"],
      [AC_DEFINE([QTHREAD_64_BIT_ALIGN], [1], [forces aligned_t to be aligned to 64 bits])])

AC_CACHE_SAVE

## ------------------- ##
## Checks for programs ##
## ------------------- ##
AC_PROG_CC
AC_PROG_CC_C99
dnl We use system extensions.  This includes setting _GNU_SOURCE
AC_USE_SYSTEM_EXTENSIONS
AC_PROG_CPP
AC_PROG_CXX
AM_PROG_AS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

AC_CACHE_SAVE

# Figure out if we're targeting SST or Unix implementation.  Will add
# MTA here when the time comes.
QTHREAD_CHECK_SST([qthread_implementation="sst"], [qthread_implementation="unix"])
AM_CONDITIONAL([COMPILE_TARGET_SST], [test "$qthread_implementation" = "sst"])
AM_CONDITIONAL([COMPILE_TARGET_UNIX], [test "$qthread_implementation" = "unix"])

## -------------------- ##
## Checks for libraries ##
## -------------------- ##
AC_SEARCH_LIBS([pthread_create], [pthread])
AS_IF([test "$qthread_implementation" = "sst"],
	  [
	   LDFLAGS="$LDFLAGS $SST_LIBS"
	   AC_SEARCH_LIBS([ceil],[m_ppc],[],[AC_MSG_ERROR([Can't seem to find ceil()])])
	   ],
	  [AS_IF([test "$qthread_implementation" = "unix"],[
	  AC_SEARCH_LIBS([ceil],[m],[],[AC_MSG_ERROR([Can't seem to find ceil()])])
	  AC_ARG_WITH([cprops],
				  [AC_HELP_STRING([--with-cprops],
								  [Location of libcprops library])])
	  AS_IF([test ! -z "$with_cprops" -a "$with_cprops" != "yes"], [
			 CPPFLAGS="${CPPFLAGS} -I$with_cprops/include"
			 LDFLAGS="${LDFLAGS} -L$with_cprops/lib"
			 EXTRA_DISTCHECK_OPTIONS="${EXTRA_DISTCHECK_OPTIONS} --with-cprops=$with_cprops"])
	  AC_SEARCH_LIBS([cp_hashtable_create], [cprops "cprops -ldl" "cprops -lsocket -lnsl"], ,
					 [AC_MSG_ERROR([Need libcprops 0.1.6 or better. See http://cprops.sf.net/])])

	  ])])

AC_CACHE_SAVE

## ----------------------- ##
## Checks for header files ##
## ----------------------- ##
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS([stdlib.h fcntl.h ucontext.h sys/time.h sys/resource.h mach/mach_time.h])
AX_CREATE_STDINT_H([include/qthread/qthread-int.h])
AC_SYS_LARGEFILE

AC_CACHE_SAVE

## --------------- ##
## Check for types ##
## --------------- ##
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T

AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([void*])

AS_IF([test "$enable_64bit_aligned_t" = "yes" -o "$ac_c_sizeof_int" = "8"],
      [AC_DEFINE([QTHREAD_64_BIT_ALIGN_T], [1], [aligned_t should be 64 bits])])

AC_CACHE_SAVE

## -------------------- ##
## Check for structures ##
## -------------------- ##
AC_COMPILE_CHECK_SIZEOF([pthread_mutex_t], [#include <pthread.h>], [24 40 44 64])
dnl BWB - FIX ME - shouldn't we actually make sure on this size thing?
AC_DEFINE([PTHREAD_MUTEX_SMALL_ENOUGH], [1],
   [this signifies that pthread_mutex_t is small enough to fit in the existing data structures])

AC_CACHE_SAVE

## ---------------------------------- ##
## Check for compiler characteristics ##
## ---------------------------------- ##
# Find out if GCC understands -fno-gcse
AC_CACHE_CHECK([if $CC understands -fno-gcse],
   [qthread_cv_cc_fno_gcse],
   [CFLAGS_save="${CFLAGS}"
    CFLAGS="${CFLAGS} -fno-gcse"
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])], 
                      [qthread_cv_cc_fno_gcse=yes],
                      [qthread_cv_cc_fno_gcse=no])
    CFLAGS="${CFLAGS_save}"])
AS_IF([test "$qthread_cv_cc_fno_gcse" = "yes"], [CFLAGS="${CFLAGS} -fno-gcse"])

AC_C_CONST
AC_C_INLINE
AC_C_RESTRICT
AC_C_VOLATILE

QTHREAD_CHECK_ATTRIBUTE_ALIGNED([AC_DEFINE([HAVE_ATTRIBUTE_ALIGNED], [1],
       [Whether the compiler supports the attribute aligned property])])

QTHREAD_CHECK_ASSEMBLY([have_assembly=1], [have_assembly=0])
AS_IF([test $have_assembly -eq 0],
	  [AS_IF([test -z "$enable_software_increments"],
			 	  [enable_software_increments=yes],
			 [test "$enable_software_increments" = "no"],
				  [AC_MSG_ERROR([No assembly available and software increments disabled.])])])
AS_IF([test "$enable_software_increments" = "yes"],
      [AC_DEFINE([QTHREAD_MUTEX_INCREMENT], [1],
         [Use mutexes instead of assembly for atomic increment])])

AC_CACHE_SAVE

## --------------------------- ##
## Check for library functions ##
## --------------------------- ##
AC_FUNC_VPRINTF
AC_FUNC_MMAP
AC_CHECK_FUNCS([strtol floor memset memmove munmap memcpy getrlimit setrlimit fstat64 lseek64 getcontext swapcontext makecontext])

AC_CACHE_SAVE

## ------------------------- ##
## Check for system services ##
## ------------------------- ##

# Figure out if we need rlimit...
AS_IF([test "$enable_setrlimit" != "no" -a "$qthread_implementation" = "unix"], [
  AS_IF([test "$ac_cv_func_getrlimit" != "yes"],
        [AC_MSG_ERROR([getrlimit() needed on Linux platforms or when setrlimit enabled])])
  AC_DEFINE([NEED_RLIMIT], [1], [Whether the library should use get/set rlimit functions])])

# Figure out if we need makecontext
qthread_makecontext_type="none"
AS_IF([test "$qthread_implementation" = "unix"], [
  case "$host" in
    *-solaris2.8)
      AC_DEFINE([EXTRA_MAKECONTEXT_ARGC], [1], 
         [solaris 8 requires argc be one larger than the actual count of arguments])
      AC_DEFINE([INVERSE_STACK_POINTER], [1], 
         [make the ss_sp member of uc_stack be the high-address of the stack, rather than the low-address of the stack])
    ;;
    *-solaris2.9)
      AC_DEFINE([__MAKECONTEXT_V2_SOURCE], [1], [force the Sun makecontext to behave correctly])
    ;;
  esac
  AS_IF([test "$ac_cv_func_getcontext" = "yes"], [
    AC_DEFINE([HAVE_NATIVE_MAKECONTEXT], [1], [The system provides native (proper) make/swap/get-contect functions])
    QTHREAD_CHECK_MAKECONTEXT_SPLIT_ARGS(
      [AC_DEFINE([QTHREAD_MAKECONTEXT_SPLIT], [1], [makecontext() passes args as int-sized, not long-sized])])
    qthread_makecontext_type="native"
  ], [
    QTHREAD_CHECK_OSX_COMPAT_MAKECONTEXT([qthread_makecontext_type="osx"])
  ])

  AS_IF([test "$qthread_makecontext_type" = "none"], 
        [AC_MSG_ERROR([Can not find working makecontext.])])
])
AM_CONDITIONAL([QTHREAD_NEED_OSX_MAKECONTEXT], [test "$qthread_makecontext_type" = "osx"])

AS_IF([test "$enable_shepherd_profiling" = "yes"],
	  [# Which timer do we want to use
	   qthread_timer_type=gettimeofday
	   AS_IF([test "$qthread_timer_type" = "gettimeofday"],
			 [AC_CHECK_FUNC([mach_absolute_time], [qthread_timer_type=mach])])
	   AS_IF([test "$qthread_timer_type" = "gettimeofday"],
			 [AC_CHECK_FUNC([gethrtime], [qthread_timer_type=gethrtime])])
	   AS_IF([test "$qthread_timer_type" = "gettimeofday"],
			 [QTHREAD_CHECK_ALTIX_TIMER([qthread_timer_type=altix])])
	   AC_MSG_CHECKING([for high resolution timer type])
	   AC_MSG_RESULT([$qthread_timer_type])
])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_MACH], [test "$qthread_timer_type" = "mach"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_GETHRTIME], [test "$qthread_timer_type" = "gethrtime"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_ALTIX], [test "$qthread_timer_type" = "altix"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_GETTIMEOFDAY], [test "$qthread_timer_type" = "gettimeofday"])
AM_CONDITIONAL([QTHREAD_NEED_QTIMER], [test -n "$qthread_timer_type"])

AC_CACHE_SAVE

## --------------- ##
## Output and done ##
## --------------- ##
AC_SUBST(EXTRA_DISTCHECK_OPTIONS)

AC_CONFIG_HEADERS([include/config.h include/qthread/common.h])
AC_CONFIG_FILES([
    Makefile
    src/Makefile
    src/osx_compat/Makefile
    src/qtimer/Makefile
    man/Makefile
    man/man3/Makefile
    include/Makefile
    include/qthread/Makefile
    test/Makefile])
AC_OUTPUT

echo ""
echo    "           Target Style: $qthread_implementation"
echo    "        Lazy Thread IDs: $enable_lazy_threadids"
echo    "  Sanity assert() Calls: $enable_asserts"
echo    "        Thread Counting: $enable_thread_count"
echo    "        Use setrlimit(): $enable_setrlimit"
echo    "Check address alignment: $enable_aligncheck"
echo    "     Shepherd profiling: $enable_shepherd_profiling"
echo -n "             Increments: "
AS_IF([test "$enable_software_increments" = "yes"], [echo "Mutex (software)"],
	  [echo "$qthread_cv_asm_arch"])
echo -n "             Stack size: "
case "$qthread_cv_stack_size" in
	8388608) echo "8MB" ;;
	2096)    echo "2kB" ;;
	4096)    echo "4kB" ;;
	*)       echo "$qthread_cv_stack_size bytes" ;;
esac
echo    " Debugging Trace Output: $enable_debug_trace"
echo    "        Unpooled Memory: $enable_unpooled_memory"
echo ""
