.TH future_join_all 3 "NOVEMBER 2006" libqthread "libqthread"
.SH NAME
\fBfuture_join_all\fR \- join with some number of futures
.SH SYNOPSIS
.B #include <qthread/futurelib.h>

.I void
.br
\fBfuture_join_all\fR(qthread_t *\fIme\fR, aligned_t *\fIfta\fR, int \fIftc\fR);
.PP

.SH DESCRIPTION
This is a function which blocks until each one of an array of futures terminates.
.PP
The first argument is a pointer to the qthread executing the join.
The second argument, \fIfta\fR, is an array of the return locations of the
futures the calling thread will join. The final argument, \fIftc\fR, indicates
the number of futures in the array.
.PP
When a thread attempts to join with future computations, the action may block, 
as futures are waiting for the number of active threads to drop. 
Deadlock may result if threads are holding resources while attempting
to join to futures which are waiting for resources.
Therefore, when a thread attempts to join, it must explicitly declare itself 
inactive using the  \fBfuture_yield\fR() function, then reactivate itself using the
\fBfuture_acquire\fR() function.
.PP
The typical sequence for creating futures is: 
.PP
1) yield 
.PP
2) loop creating futures
.PP 
3) [optional: join with futures]
.PP
4) acquire
.SH "SEE ALSO"
.BR future_join_all (3),
.BR future_init (3),
.BR future_exit (3),
.BR future_yield (3),
.BR future_acquire (3)
