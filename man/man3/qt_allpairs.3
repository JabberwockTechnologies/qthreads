.TH qt_allpairs 3 "OCTOBER 2009" libqthread "libqthread"
.SH NAME
\fBqt_allpairs\fR, \fBqt_allpairs_output\fR \- computes a given function over all pairs of the input data
.SH SYNOPSIS
.B #include <qthread/allpairs.h>

.I void
.br
\fBqt_allpairs\fR(const qarray *\fIarray1\fR, const qarray *\fIarray2\fR,
.ti +12
const dist_f \fIdistfunc\fR);
.PP
.I void
.br
\fBqt_allpairs_output\fR(const qarray *\fIarray1\fR, const qarray *\fIarray2\fR,
.ti +19
const dist_out_f \fIdistfunc\fR,
.ti +19
void *restrict *restrict \fIoutput\fR,
.ti +19
const size_t \fIoutsize\fR);
.SH DESCRIPTION
The All-Pairs abstraction takes as input two sets of data (\fIarray1\fR and
\fIarray2\fR) and a "combination" function (\fIdistfunc\fR) that accepts two
elements as input, one from each data set. This function is then applied to all
pairs of elements from the two sets. The computation occurs in locations influenced by the location of the input data.
.PP
The \fIdistfunc\fR function must match the following prototype:
.RS
.PP
int \fBdistfunc\fR(void *a, void *b);
.RE
.PP
There are two forms of the All-Pairs abstraction: one (\fBqt_allpairs\fR) that leaves the output to the user, and one (\fBqt_allpairs_output\fR) that handles collecting the output. In the latter case, the \fIoutput\fR must be a pointer to a two-dimensional array and \fIoutsize\fR specifies the size of the elements within that array.
.SH "SEE ALSO"
.BR qarray (3)
